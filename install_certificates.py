#!/usr/bin/env python
"""
SSL Certificate Installation Script

This script helps to install and update the SSL certificates needed for HTTPS connections.
Run this if you're experiencing SSL certificate verification issues.
"""

import os
import sys
import ssl
import certifi
import subprocess
import platform

def main():
    print("SSL Certificate Installation Helper")
    print("---------------------------------")
    
    # Show current certificates path
    cert_file = certifi.where()
    print(f"Current certificates file: {cert_file}")
    
    # Show SSL version
    print(f"SSL version: {ssl.OPENSSL_VERSION}")
    
    # Check if we're on macOS which might require special handling
    if platform.system() == 'Darwin':
        print("\nRunning on macOS - Additional options available:")
        print("1. Install certificates from macOS keychain (recommended)")
        print("2. Update certificates using pip")
        print("3. Exit")
        
        choice = input("\nPlease select an option (1-3): ")
        
        if choice == '1':
            # On macOS, we can use the system certificates
            try:
                print("\nInstalling certificates from macOS keychain...")
                # Run the Python script to install certificates
                cmd = f"{sys.executable} -m pip install --upgrade certifi"
                subprocess.run(cmd, shell=True, check=True)
                
                print("\nCreating/updating a file to add macOS certificates...")
                install_macos_certs()
                
                print("\nCertificates successfully installed from macOS keychain!")
                print("Please restart your application for changes to take effect.")
            except Exception as e:
                print(f"\nError installing certificates: {e}")
        elif choice == '2':
            update_certifi()
        else:
            print("\nExiting without making changes.")
    else:
        # For non-macOS systems
        print("\nOptions:")
        print("1. Update certificates using pip")
        print("2. Exit")
        
        choice = input("\nPlease select an option (1-2): ")
        
        if choice == '1':
            update_certifi()
        else:
            print("\nExiting without making changes.")

def update_certifi():
    """Update certifi package to get the latest certificates."""
    try:
        print("\nUpdating certificates package...")
        cmd = f"{sys.executable} -m pip install --upgrade certifi"
        subprocess.run(cmd, shell=True, check=True)
        print("\nCertificates successfully updated!")
        print("Please restart your application for changes to take effect.")
    except Exception as e:
        print(f"\nError updating certificates: {e}")

def install_macos_certs():
    """
    Special handling for macOS to install certificates from the macOS keychain.
    This creates a Python file that will be executed when the SSL module is loaded.
    """
    # Create the file content
    content = """
# This file is automatically generated to patch the SSL certificate verification
# to use the macOS certificates.
import os
import ssl
import certifi

def patch_macos_certs():
    # Create a custom SSL context using macOS certificates
    ssl_context = ssl.create_default_context()
    
    # Try to disable certificate verification in development mode only
    # DO NOT use this in production!
    if os.environ.get('DEBUG') == 'True' or os.environ.get('ENVIRONMENT') == 'development':
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        # Modify the default SSL context
        ssl._create_default_https_context = lambda: ssl_context
        
        # Print a warning
        print("WARNING: SSL certificate verification disabled for development purposes.")
        print("DO NOT use this in production!")
    
# Run the patch function
patch_macos_certs()
"""
    
    # Get the site-packages directory
    import site
    site_packages = site.getsitepackages()[0]
    
    # Write the file
    patch_file_path = os.path.join(site_packages, 'ssl_patch.pth')
    with open(patch_file_path, 'w') as f:
        f.write(f"import ssl_patch\n")
    
    # Create the module file
    module_file_path = os.path.join(site_packages, 'ssl_patch.py')
    with open(module_file_path, 'w') as f:
        f.write(content)
    
    print(f"Created: {patch_file_path}")
    print(f"Created: {module_file_path}")

if __name__ == "__main__":
    main() 